{
    "cells": [
      {
        "cell_type": "code",
        "execution_count": 1,
        "metadata": {
          "id": "bIw82qhuHWy0"
        },
        "outputs": [],
        "source": [
          "from google.auth import default\n",
          "from google.auth.transport.requests import Request\n",
          "from google.cloud import bigquery\n",
          "import requests\n",
          "import json, base64, os"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "id": "7kIF8zKGH8sX"
        },
        "outputs": [],
        "source": [
          "client = bigquery.Client()\n",
          "query = '%%query%%'\n",
          "results = client.query(query).to_dataframe()\n",
          "file_content = results.to_json(orient='records', indent=2)\n"
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "class RefreshGCPError(Exception):\n",
          "    pass\n",
          "\n",
          "class ExternalAPIError(Exception):\n",
          "    def __init__(self, status_code: int, detail: str):\n",
          "        self.status_code = status_code\n",
          "        self.detail = detail\n",
          "        super().__init__(detail)"
        ],
        "metadata": {
          "id": "l9ecRj3QdFcs"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "def get_access_token():\n",
          "    \"\"\"Get access token using default credentials (works on GCP).\"\"\"\n",
          "    credentials, project = default()\n",
          "\n",
          "    # Refresh the token if needed\n",
          "    auth_req = Request()\n",
          "    credentials.refresh(auth_req)\n",
          "    return credentials.token\n",
          "\n",
          "def get_headers(access_token):\n",
          "    return {\n",
          "        \"Authorization\": f\"Bearer {access_token}\",\n",
          "        \"Content-Type\": \"application/json\",\n",
          "    }\n",
          "\n",
          "def make_request(url, method=\"get\", payload=None, access_token=\"\"):\n",
          "        try:\n",
          "            # Set up the headers\n",
          "            headers = get_headers(access_token)\n",
          "\n",
          "            # Initialize options dictionary\n",
          "            options = {\n",
          "                \"headers\": headers,\n",
          "            }\n",
          "            if payload:\n",
          "                options[\"json\"] = (\n",
          "                    payload  # Automatically encodes the payload as JSON and adds Content-Type\n",
          "                )\n",
          "\n",
          "            # Make the request\n",
          "            if method.lower() == \"get\":\n",
          "                response = requests.get(url, **options)\n",
          "            elif method.lower() == \"post\":\n",
          "                response = requests.post(url, **options)\n",
          "            elif method.lower() == \"put\":\n",
          "                response = requests.put(url, **options)\n",
          "            elif method.lower() == \"delete\":\n",
          "                response = requests.delete(url, **options)\n",
          "            elif method.lower() == \"patch\":\n",
          "                response = requests.patch(url, **options)\n",
          "            else:\n",
          "                print(f\"Unsupported method: {method}\")\n",
          "                return None\n",
          "\n",
          "            try:\n",
          "                print(\n",
          "                    f\"Request result code {url}, {method}, {response.status_code} {response.reason}\"\n",
          "                )\n",
          "            except Exception as e:\n",
          "                print(\"Can't log request result\", str(e))\n",
          "\n",
          "            # token expired\n",
          "            if response.status_code == 401:\n",
          "                print(f\"Request failed = 401: {response.status_code} {response.reason}\")\n",
          "                print(f\"Making {method} request to {url}\")\n",
          "                raise RefreshGCPError\n",
          "            elif response.status_code >= 400:\n",
          "                print(f\"Making {method} request to {url}\")\n",
          "                print(f\"Request failed > 400: {response.status_code} {response.reason}\")\n",
          "                raise ExternalAPIError(response.status_code, response.reason)\n",
          "            elif response.status_code >= 200:\n",
          "                result = response.json()\n",
          "        except requests.exceptions.HTTPError as http_err:\n",
          "            # Capture HTTP error status and return it\n",
          "            raise ExternalAPIError(response.status_code, response.text) from http_err\n",
          "        except requests.exceptions.RequestException as req_err:\n",
          "            # Handle network or connection errors\n",
          "            raise ExternalAPIError(\n",
          "                500, \"Failed to connect to the external API\"\n",
          "            ) from req_err\n",
          "\n",
          "        return result\n",
          "\n",
          "\n",
          "def make_get_request(url, access_token=\"\"):\n",
          "    return make_request(url, \"get\", None, access_token)\n",
          "\n",
          "def make_post_request(url, payload, access_token=\"\"):\n",
          "    return make_request(url, \"post\", payload, access_token)\n",
          "\n",
          "def make_delete_request(url, payload, access_token=\"\"):\n",
          "    return make_request(url, \"delete\", payload, access_token)\n",
          "\n",
          "\n",
          "\n",
          "def get_workspaces(data, access_token):\n",
          "    url = f\"https://dataform.googleapis.com/v1beta1/projects/{data['project_id']}/locations/{data['region']}/repositories/{data['dataform_respository_name']}/workspaces\"\n",
          "    return make_get_request(url, access_token)\n",
          "\n",
          "\n",
          "def create_workspace(data: dict, access_token: str):\n",
          "    url = f\"https://dataform.googleapis.com/v1beta1/projects/{data['project_id']}/locations/{data['region']}/repositories/{data['dataform_respository_name']}/workspaces?workspaceId={data['workspace_id']}\"\n",
          "    return make_post_request(url, {}, access_token)\n",
          "\n",
          "def delete_workspace(data: dict, access_token: str):\n",
          "    url = f\"https://dataform.googleapis.com/v1beta1/projects/{data['project_id']}/locations/{data['region']}/repositories/{data['dataform_respository_name']}/workspaces/{data['workspace_id']}\"\n",
          "    return make_delete_request(url, {}, access_token)\n",
          "\n",
          "\n",
          "\n",
          "def commit_workspace(config: dict, access_token: str):\n",
          "    \"\"\"Commit changes in the Dataform workspace.\"\"\"\n",
          "    try:\n",
          "        url = f\"https://dataform.googleapis.com/v1beta1/projects/{config.get('project_id')}/locations/{config.get('region')}/repositories/{config.get('dataform_respository_name')}/workspaces/{config.get('workspace_id')}:commit\"\n",
          "\n",
          "        print(f\"\\nCommitting changes in workspace: {config.get('workspace_id')}\")\n",
          "        print(f\"URL: {url}\")\n",
          "\n",
          "        # Add commit message in payload\n",
          "        payload = {\n",
          "            \"author\": {\"name\": \"Superform\", \"emailAddress\": \"%%DATAFORM_COMMIT_EMAIL%%\"},\n",
          "            \"commitMessage\": \"%%DATAFORM_COMMIT_MESSAGE$$\",\n",
          "        }\n",
          "        response = make_post_request(url, payload, access_token)\n",
          "        print(\"dataform: Workspace changes committed successfully!\")\n",
          "        return response\n",
          "\n",
          "    except Exception as e:\n",
          "        print(f\"Error committing workspace changes: {str(e)}\")\n",
          "        raise\n",
          "\n",
          "\n",
          "def push_workspace(config: dict, access_token: str):\n",
          "    \"\"\"Push changes from the Dataform workspace.\"\"\"\n",
          "    try:\n",
          "        url = f\"https://dataform.googleapis.com/v1beta1/projects/{config.get('project_id')}/locations/{config.get('region')}/repositories/{config.get('dataform_respository_name')}/workspaces/{config.get('workspace_id')}:push\"\n",
          "\n",
          "        print(f\"\\nPushing changes from workspace: {config.get('workspace_id')}\")\n",
          "        print(f\"URL: {url}\")\n",
          "\n",
          "        # Make the request with empty payload\n",
          "        response = make_post_request(url, {}, access_token)\n",
          "        print(\"dataform: Workspace changes pushed successfully!\")\n",
          "        return response\n",
          "\n",
          "    except Exception as e:\n",
          "        print(f\"Error pushing workspace changes: {str(e)}\")\n",
          "        raise\n",
          "\n",
          "\n",
          "def update_file(data, file_name, contents, access_token):\n",
          "    parent = f\"projects/{data.get('project_id')}/locations/{data.get('region')}/repositories/{data.get('dataform_respository_name')}\"\n",
          "    url = f\"https://dataform.googleapis.com/v1beta1/{parent}/workspaces/{data.get('workspace_id')}:writeFile\"\n",
          "    print(f\"dataform: update_file URL: {url}\")\n",
          "    # check if the file is already encoded\n",
          "    if isinstance(contents, bytes):\n",
          "        encoded_contents = base64.b64encode(contents).decode(\"utf-8\")\n",
          "    else:\n",
          "        encoded_contents = base64.b64encode(contents.encode(\"utf-8\")).decode(\"utf-8\")\n",
          "    payload = {\"path\": file_name, \"contents\": encoded_contents}\n",
          "    response = make_post_request(url, payload, access_token)\n",
          "    print(f\"dataform: File {file_name} updated successfully!\")\n",
          "    return response\n",
          "\n",
          "\n",
          "def process_config(contents):\n",
          "    DATAFORM_REPOSITORY_NAME = \"%%DATAFORM_REPOSITORY_NAME%%\"\n",
          "    DATAFORM_REPOSITORY_WORKSPACE = \"%%DATAFORM_REPOSITORY_WORKSPACE%%\"\n",
          "    DATAFORM_REPOSITORY_REGION = \"%%DATAFORM_REPOSITORY_REGION%%\"\n",
          "    DATAFORM_CONFIG_PATH = \"%%DATAFORM_CONFIG_PATH%%\"\n",
          "    GOOGLE_CLOUD_PROJECT = \"%%GOOGLE_CLOUD_PROJECT%%\"\n",
          "    access_token = get_access_token()\n",
          "    if not access_token:\n",
          "        raise Exception(\"Failed to get access token\")\n",
          "    else:\n",
          "        print(f\"Access token obtained successfully!\")\n",
          "\n",
          "    data = {\n",
          "        \"project_id\": GOOGLE_CLOUD_PROJECT,\n",
          "        \"region\": DATAFORM_REPOSITORY_REGION,\n",
          "        \"dataform_respository_name\": DATAFORM_REPOSITORY_NAME,\n",
          "        \"workspace_id\": DATAFORM_REPOSITORY_WORKSPACE,\n",
          "    }\n",
          "    try:\n",
          "        workspaces = get_workspaces(data, access_token)\n",
          "        if DATAFORM_REPOSITORY_WORKSPACE in [w.get('name').split('/')[-1] for w in workspaces['workspaces']]:\n",
          "          delete_workspace(data, access_token)\n",
          "        create_workspace(data, access_token)\n",
          "        update_file(data, DATAFORM_CONFIG_PATH, contents, access_token)\n",
          "        commit_workspace(data, access_token)\n",
          "        push_workspace(data, access_token)\n",
          "        delete_workspace(data, access_token)\n",
          "    except Exception as e:\n",
          "        print(f\"Error processing config: {str(e)}\")\n",
          "        raise\n"
        ],
        "metadata": {
          "id": "4lh1N15Vc0OU"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "process_config(file_content)"
        ],
        "metadata": {
          "id": "RRuMxuWVdrnc"
        },
        "execution_count": null,
        "outputs": []
      }
    ],
    "metadata": {
      "colab": {
        "cell_execution_strategy": "setup",
        "name": "notebook_template",
        "provenance": []
      },
      "kernelspec": {
        "display_name": "Python 3",
        "name": "python3"
      },
      "language_info": {
        "name": "python"
      }
    },
    "nbformat": 4,
    "nbformat_minor": 0
  }